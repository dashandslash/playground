on: 
  issue_comment:
    types: [created]
name: Rebase and Merge
jobs:
  rebase_and_merge:
    name: RebaseAndMerge
    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/merge')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the latest code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Automatic Rebase
      uses: cirrus-actions/rebase@1.3.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Failure Label
      uses: actions/github-script@v3.0.0
      if: ${{ failure() }}
      with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            github.issues.addLabels({
              owner: context.repo.owner,
              issue_number: context.issue.number,
              repo: context.repo.repo,
              labels: ['issue:rebase conflicts']
            })
    - name: Success Unlabel
      uses: actions/github-script@v3.0.0
      if: success() && contains( github.event.issue.labels.*.name, 'issue:rebase conflicts')
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          github.issues.removeLabel({
            owner: context.payload.repository.owner.login
            repo: context.payload.repository.name,
            issue_number: context.issue.number,
            name: 'issue:rebase conflicts'
          })
    - name: Merge
      uses: actions/github-script@v3.0.0
      if: success()
      with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            github.pulls.merge({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              pull_number: context.payload.issue.number,
              merge_method: 'merge'
            })

